[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentnet"
version = "0.5.0"
description = "A governed multi-agent reasoning platform with performance harness and comprehensive testing"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "GPL-3.0"}
authors = [
    {name = "AgentNet Contributors", email = "contributors@agentnet.dev"}
]
maintainers = [
    {name = "AgentNet Team", email = "maintainers@agentnet.dev"}
]
keywords = [
    "ai", "llm", "multi-agent", "reasoning", "policy", "governance",
    "performance", "testing", "observability", "benchmarking"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
]

# Core dependencies for Phase 0-5
dependencies = [
    "typing-extensions>=4.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
# Phase 1+ dependencies (optional for Phase 0)
full = [
    "networkx>=3.0",
    "numpy>=1.21.0",
    "faiss-cpu>=1.7.0",
    "openai>=1.0.0",
    "chromadb>=0.4.0",
]

# Integration dependencies
langchain = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
]

openai = [
    "openai>=1.0.0",
]

huggingface = [
    "transformers>=4.30.0",
    "huggingface_hub>=0.16.0",
    "torch>=2.0.0",
    "datasets>=2.0.0",
]

# Vector database dependencies
pinecone = [
    "pinecone-client>=2.2.0",
]

weaviate = [
    "weaviate-client>=3.15.0",
]

milvus = [
    "pymilvus>=2.3.0",
]

vector_databases = ["agentnet[pinecone,weaviate,milvus]"]

# Monitoring dependencies
monitoring = [
    "prometheus-client>=0.16.0",
    "requests>=2.28.0",
    "pyyaml>=6.0",
]

# All integration dependencies
integrations = ["agentnet[langchain,openai,huggingface,vector_databases,monitoring]"]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=1.0.0",
    "coverage>=6.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

# Performance testing dependencies
performance = [
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "seaborn>=0.11.0",
]

# All dependencies
all = ["agentnet[full,integrations,dev,docs,performance]"]

[project.urls]
"Homepage" = "https://github.com/V1B3hR/agentnet"
"Documentation" = "https://github.com/V1B3hR/agentnet/tree/main/docs"
"Repository" = "https://github.com/V1B3hR/agentnet"
"Bug Reports" = "https://github.com/V1B3hR/agentnet/issues"
"Changelog" = "https://github.com/V1B3hR/agentnet/blob/main/CHANGELOG.md"

# Entry points for extensibility (Phase 5 plugin registry)
[project.entry-points."agentnet.tools"]
calculator = "agentnet.tools.examples:CalculatorTool"
status_check = "agentnet.tools.examples:StatusCheckTool"
file_write = "agentnet.tools.examples:FileWriteTool"
web_search = "agentnet.tools.examples:WebSearchTool"

[project.entry-points."agentnet.policies"]
keyword_filter = "agentnet.core.policy.rules:create_keyword_rule"
confidence_threshold = "agentnet.core.policy.rules:create_confidence_rule"

[project.entry-points."agentnet.evaluators"]
truthiness = "agentnet.critique.evaluators:TruthinessEvaluator"
complexity = "agentnet.critique.evaluators:ComplexityEvaluator"
risk_tagger = "agentnet.critique.evaluators:RiskTaggerEvaluator"

[project.entry-points."agentnet.providers"]
example = "agentnet.providers.example:ExampleEngine"
instrumented = "agentnet.providers.instrumented:InstrumentedProvider"

langchain = "agentnet.integrations.langchain:LangChainCompatibilityLayer"
pinecone = "agentnet.integrations.vector_databases:PineconeAdapter"
weaviate = "agentnet.integrations.vector_databases:WeaviateAdapter"
milvus = "agentnet.integrations.vector_databases:MilvusAdapter"
prometheus = "agentnet.integrations.monitoring:PrometheusIntegration"
grafana = "agentnet.integrations.monitoring:GrafanaIntegration"

langchain = "agentnet.integrations.langchain:LangChainCompatibilityLayer"
pinecone = "agentnet.integrations.vector_databases:PineconeAdapter"
weaviate = "agentnet.integrations.vector_databases:WeaviateAdapter"
milvus = "agentnet.integrations.vector_databases:MilvusAdapter"
prometheus = "agentnet.integrations.monitoring:PrometheusIntegration"
grafana = "agentnet.integrations.monitoring:GrafanaIntegration"

[project.entry-points."agentnet.memory"]
short_term = "agentnet.memory.buffer:ShortTermBuffer"
vector_store = "agentnet.memory.vector:VectorMemory"

# Console scripts
[project.scripts]
agentnet = "agentnet.__main__:main"
agentnet-test = "agentnet.testing.matrix:main"
agentnet-benchmark = "agentnet.performance.harness:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agentnet*"]

[tool.setuptools.package-data]
agentnet = ["py.typed", "**/*.yaml", "**/*.yml", "**/*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | site
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agentnet"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
packages = ["agentnet"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["agentnet"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "agentnet/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]