name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install install-dev
          pip install ruff mypy bandit
          
      - name: Run ruff linting
        run: ruff check agentnet tests scripts --output-format=github
        
      - name: Run ruff formatting check
        run: ruff format --check agentnet tests scripts
        
      - name: Run mypy type checking
        run: mypy agentnet --ignore-missing-imports --no-strict-optional
        
      - name: Run bandit security scan
        run: bandit -r agentnet/ -f json -o bandit-report.json || true
        
      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install install-dev
          pip install pytest-cov
          
      - name: Run unit tests with coverage
        run: |
          PYTHONPATH=. python -m pytest tests/ -v --cov=agentnet --cov-report=xml --cov-report=html --cov-fail-under=85
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
            
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install install-dev
          pip install docker
          
      - name: Start test services
        run: |
          # Start ephemeral test database and vector store if needed
          echo "Starting test services..."
          
      - name: Run integration tests
        run: |
          PYTHONPATH=. python -m pytest tests/ -v -m integration --tb=short
          
      - name: Run contract tests
        run: |
          # Test provider adapters
          PYTHONPATH=. python -c "
          from agentnet.providers.example import ExampleEngine
          from agentnet.core.cost.recorder import CostRecorder
          engine = ExampleEngine()
          recorder = CostRecorder()
          print('Contract tests passed')
          "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          python -m twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/
          
      - name: Install package from wheel
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl
          
      - name: Run smoke tests
        run: |
          # Test basic imports and functionality
          python -c "import agentnet; print('AgentNet version:', agentnet.__version__)"
          python -c "from agentnet import AgentNet, ExampleEngine; print('Basic imports work')"
          
      - name: Run demo smoke test
        run: |
          python -c "
          from agentnet import AgentNet, ExampleEngine
          engine = ExampleEngine()
          agent = AgentNet('SmokeTest', {'logic': 0.8}, engine=engine)
          result = agent.generate_reasoning_tree('Hello AgentNet!')
          print('Smoke test result:', result['result']['content'][:50])
          "